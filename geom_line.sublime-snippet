<snippet>
	<content><![CDATA[

// determine if abc are colinear
bool PointOnLine(PT a, PT b, PT c){
  return sgn(cross(b-a, c-a)) == 0;
}
// determine if lines from a to b and c to d are parallel or collinear
bool LinesParallel(PT a, PT b, PT c, PT d) { 
  return sgn(cross(b-a, c-d)) == 0; 
}
bool LinesCollinear(PT a, PT b, PT c, PT d) { 
  return LinesParallel(a, b, c, d)
      && sgn(cross(a-b, a-c)) == 0
      && sgn(cross(c-d, c-a)) == 0;
}

// project point c onto line ab
// assuming a != b
PT ProjectPointLine(PT a, PT b, PT c) {
  return a + (b-a)*dot(c-a, b-a)/dot(b-a, b-a);
}

// project point c onto line segment ab
PT ProjectPointSegment(PT a, PT b, PT c) {
  double r = dot(b-a,b-a);
  if (!sgn(r)) return a;
  r = dot(c-a, b-a)/r;
  if (r < 0) return a;
  if (r > 1) return b;
  return a + (b-a)*r;
}

// signed! distance from c to line ab
double DistancePointLine(PT a, PT b, PT c) {
  return cross(b-a, c-a)/dis(a, b);
}
// compute distance from c to segment ab
double DistancePointSegment(PT a, PT b, PT c) {
  return sqrt(dist2(c, ProjectPointSegment(a, b, c)));
}
// compute distance between point (x,y,z) and plane ax+by+cz=d
double DistancePointPlane(double x, double y, double z, double a, double b, double c, double d) {
  return fabs(a*x+b*y+c*z-d)/sqrt(a*a+b*b+c*c);
}

// determine if line segment from a to b intersects with 
// line segment from c to d
bool SegmentsIntersect(PT a, PT b, PT c, PT d) {
  if (LinesCollinear(a, b, c, d)) {
    if (dist2(a, c)<EPS || dist2(a, d)<EPS || dist2(b, c)<EPS || dist2(b, d)<EPS)
      return true;
    if (dot(c-a, c-b) > 0 && dot(d-a, d-b) > 0 && dot(c-b, d-b) > 0)
      return false;
    return true;
  }
  if (cross(d-a, b-a) * cross(c-a, b-a) > 0) return false;
  if (cross(a-c, d-c) * cross(b-c, d-c) > 0) return false;
  return true;
}

// compute intersection of line ab with line cd
// assuming that unique intersection exists
// for segments, check if segments intersect first
PT ComputeLineIntersection(PT a, PT b, PT c, PT d) {
  b=b-a;  d=c-d;  c=c-a;
  assert(dot(b, b) > EPS && dot(d, d) > EPS);
  return a + b*cross(c, d)/cross(b, d);
}
]]></content>
	<tabTrigger>geomline</tabTrigger>
	<scope>source.c++</scope>
</snippet>
