<snippet>
	<content><![CDATA[
const int N = ${1:1000};
struct Edge {
  int from, to, cap, flow, index;
  Edge(int from, int to, int cap, int flow, int index) :
    from(from), to(to), cap(cap), flow(flow), index(index) {}
};
struct MaxFlow {
  int n;
  vector<Edge> G[N];
  LL excess[N];
  int dist[N], active[N], count[N*2];
  queue<int> Q;
  MaxFlow(int n) : n(n) {
    fill(excess, excess + n, 0LL);
    fill(dist, dist + n, 0);
    fill(active, active + n, 0);
    fill(count, count + n*2, 0);
  }

  void addEdge(int from, int to, int cap) {
    G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
    if(from == to) G[from].back().index++;
    G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
  }

  void Enqueue(int v) { 
    if(!active[v] && excess[v] > 0) { active[v] = true; Q.push(v); } 
  }
  void Push(Edge &e) {
    int amt = int(min(excess[e.from], LL(e.cap - e.flow)));
    if(dist[e.from] <= dist[e.to] || amt == 0) return;
    e.flow += amt;
    G[e.to][e.index].flow -= amt;
    excess[e.to] += amt;    
    excess[e.from] -= amt;
    Enqueue(e.to);
  }
  void Gap(int k) {
    for(int v = 0; v < n; v++) {
      if(dist[v] < k) continue;
      count[dist[v]]--;
      dist[v] = max(dist[v], n+1);
      count[dist[v]]++;
      Enqueue(v);
    }
  }
  void Relabel(int v) {
    count[dist[v]]--;
    dist[v] = 2*n;
    for(int i = 0; i < G[v].size(); i++) 
      if(G[v][i].cap - G[v][i].flow > 0)
        dist[v] = min(dist[v], dist[G[v][i].to] + 1);
    count[dist[v]]++;
    Enqueue(v);
  }
  void Discharge(int v) {
    for(int i = 0; excess[v] > 0 && i < G[v].size(); i++) Push(G[v][i]);
    if(excess[v] > 0) {
      if (count[dist[v]] == 1) Gap(dist[v]); 
      else Relabel(v);
    }
  }

  LL maxFlow(int s, int t) {
    count[0] = n-1;
    count[n] = 1;
    dist[s] = n;
    active[s] = active[t] = true;
    for(int i = 0; i < G[s].size(); i++) {
      excess[s] += G[s][i].cap;
      Push(G[s][i]);
    }
    while(!Q.empty()) {
      int v = Q.front();
      Q.pop();
      active[v] = false;
      Discharge(v);
    }
    LL totflow = 0;
    for(int i = 0; i < G[s].size(); i++) totflow += G[s][i].flow;
    return totflow;
  }
};

]]></content>
	<tabTrigger>maxflow</tabTrigger>
	<scope>source.c++</scope>
</snippet>
