<snippet>
	<content><![CDATA[
const int N = ${1:1000};
struct MaxMatch {
  int n, m, stamp;
  int match[N], visit[N];
  vi edge[N];
  MaxMatch(int left, int right): n(left), m(right) {
  	fill(match, match + m, -1);
    fill(visit, visit + m, 0);
    stamp = 0;
  }

  void add(int x, int y) { edge[x].push_back(y); }

  bool dfs(int x) {
    for (int i = 0; i < (int)edge[x].size(); ++i) {
      int y = edge[x][i];
      if (visit[y] != stamp) {
        visit[y] = stamp;
        if (match[y] == -1 || dfs(match[y])) {
          match[y] = x;
          return true;
        }
      }
    }
    return false;
  }
  // O(E * V)
  int maxMatch() {
    int ans = 0;
    for (int i = 0; i < n; ++i) {
      stamp++;
      ans += dfs(i);
    }
    return ans;
  }
};
${2}
]]></content>
	<tabTrigger>maxmatch</tabTrigger>
	<scope>source.c++</scope>
</snippet>
